{"version":3,"file":"213fce9c284921d22fd2.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/components/ExtraControls.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/Timeseries/EchartsTimeseries.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/components/Echart.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { HandlerFunction, JsonValue, styled } from '@superset-ui/core';\nimport {\n  RadioButtonOption,\n  sharedControlComponents,\n} from '@superset-ui/chart-controls';\nimport { AreaChartExtraControlsOptions } from '../constants';\n\nconst { RadioButtonControl } = sharedControlComponents;\n\nconst ExtraControlsWrapper = styled.div`\n  text-align: center;\n`;\n\nexport function useExtraControl<\n  F extends {\n    stack: any;\n    area: boolean;\n  },\n>({\n  formData,\n  setControlValue,\n}: {\n  formData: F;\n  setControlValue?: HandlerFunction;\n}) {\n  const { stack, area } = formData;\n  const [extraValue, setExtraValue] = useState<JsonValue | undefined>(\n    stack ?? undefined,\n  );\n\n  useEffect(() => {\n    setExtraValue(stack);\n  }, [stack]);\n\n  const extraControlsOptions = useMemo(() => {\n    if (area) {\n      return AreaChartExtraControlsOptions;\n    }\n    return [];\n  }, [area]);\n\n  const extraControlsHandler = useCallback(\n    (value: RadioButtonOption[0]) => {\n      if (area) {\n        if (setControlValue) {\n          setControlValue('stack', value);\n          setExtraValue(value);\n        }\n      }\n    },\n    [area, setControlValue],\n  );\n\n  return {\n    extraControlsOptions,\n    extraControlsHandler,\n    extraValue,\n  };\n}\n\nexport function ExtraControls<\n  F extends {\n    stack: any;\n    area: boolean;\n    showExtraControls: boolean;\n  },\n>({\n  formData,\n  setControlValue,\n}: {\n  formData: F;\n  setControlValue?: HandlerFunction;\n}) {\n  const { extraControlsOptions, extraControlsHandler, extraValue } =\n    useExtraControl<F>({\n      formData,\n      setControlValue,\n    });\n\n  if (!formData.showExtraControls) {\n    return null;\n  }\n\n  return (\n    <ExtraControlsWrapper>\n      <RadioButtonControl\n        options={extraControlsOptions}\n        onChange={extraControlsHandler}\n        value={extraValue}\n      />\n    </ExtraControlsWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { LegendState } from '@superset-ui/core';\nimport React, { useCallback, useRef } from 'react';\nimport { ViewRootGroup } from 'echarts/types/src/util/types';\nimport GlobalModel from 'echarts/types/src/model/Global';\nimport ComponentModel from 'echarts/types/src/model/Component';\nimport { EchartsHandler, EventHandlers } from '../types';\nimport Echart from '../components/Echart';\nimport { TimeseriesChartTransformedProps } from './types';\nimport { ExtraControls } from '../components/ExtraControls';\n\nconst TIMER_DURATION = 300;\n\n// @ts-ignore\nexport default function EchartsTimeseries({\n  formData,\n  height,\n  width,\n  echartOptions,\n  groupby,\n  labelMap,\n  selectedValues,\n  setDataMask,\n  setControlValue,\n  legendData = [],\n  onLegendStateChanged,\n}: TimeseriesChartTransformedProps) {\n  const { emitFilter, stack } = formData;\n  const echartRef = useRef<EchartsHandler | null>(null);\n  const clickTimer = useRef<ReturnType<typeof setTimeout>>();\n\n  const getModelInfo = (target: ViewRootGroup, globalModel: GlobalModel) => {\n    let el = target;\n    let model: ComponentModel | null = null;\n    while (el) {\n      // eslint-disable-next-line no-underscore-dangle\n      const modelInfo = el.__ecComponentInfo;\n      if (modelInfo != null) {\n        model = globalModel.getComponent(modelInfo.mainType, modelInfo.index);\n        break;\n      }\n      el = el.parent;\n    }\n    return model;\n  };\n\n  const handleChange = useCallback(\n    (values: string[]) => {\n      if (!emitFilter) {\n        return;\n      }\n      const groupbyValues = values.map(value => labelMap[value]);\n\n      setDataMask({\n        extraFormData: {\n          filters:\n            values.length === 0\n              ? []\n              : groupby.map((col, idx) => {\n                  const val = groupbyValues.map(v => v[idx]);\n                  if (val === null || val === undefined)\n                    return {\n                      col,\n                      op: 'IS NULL',\n                    };\n                  return {\n                    col,\n                    op: 'IN',\n                    val: val as (string | number | boolean)[],\n                  };\n                }),\n        },\n        filterState: {\n          label: groupbyValues.length ? groupbyValues : undefined,\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null,\n        },\n      });\n    },\n    [groupby, labelMap, setDataMask, emitFilter],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      // Ensure that double-click events do not trigger single click event. So we put it in the timer.\n      clickTimer.current = setTimeout(() => {\n        const { seriesName: name } = props;\n        const values = Object.values(selectedValues);\n        if (values.includes(name)) {\n          handleChange(values.filter(v => v !== name));\n        } else {\n          handleChange([name]);\n        }\n      }, TIMER_DURATION);\n    },\n    legendselectchanged: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    legendselectall: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    legendinverseselect: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n  };\n\n  const zrEventHandlers: EventHandlers = {\n    dblclick: params => {\n      // clear single click timer\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      const pointInPixel = [params.offsetX, params.offsetY];\n      const echartInstance = echartRef.current?.getEchartInstance();\n      if (echartInstance?.containPixel('grid', pointInPixel)) {\n        // do not trigger if click unstacked chart's blank area\n        if (!stack && params.target?.type === 'ec-polygon') return;\n        // @ts-ignore\n        const globalModel = echartInstance.getModel();\n        const model = getModelInfo(params.target, globalModel);\n        if (model) {\n          const { name } = model;\n          const legendState: LegendState = legendData.reduce(\n            (previous, datum) => ({\n              ...previous,\n              [datum]: datum === name,\n            }),\n            {},\n          );\n          onLegendStateChanged?.(legendState);\n        }\n      }\n    },\n  };\n\n  return (\n    <>\n      <ExtraControls formData={formData} setControlValue={setControlValue} />\n      <Echart\n        ref={echartRef}\n        height={height}\n        width={width}\n        echartOptions={echartOptions}\n        eventHandlers={eventHandlers}\n        zrEventHandlers={zrEventHandlers}\n        selectedValues={selectedValues}\n      />\n    </>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n} from 'react';\nimport { styled } from '@superset-ui/core';\nimport { ECharts, init } from 'echarts';\nimport { EchartsHandler, EchartsProps, EchartsStylesProps } from '../types';\n\nconst Styles = styled.div<EchartsStylesProps>`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\n\nfunction Echart(\n  {\n    width,\n    height,\n    echartOptions,\n    eventHandlers,\n    zrEventHandlers,\n    selectedValues = {},\n  }: EchartsProps,\n  ref: React.Ref<EchartsHandler>,\n) {\n  const divRef = useRef<HTMLDivElement>(null);\n  const chartRef = useRef<ECharts>();\n  const currentSelection = useMemo(\n    () => Object.keys(selectedValues) || [],\n    [selectedValues],\n  );\n  const previousSelection = useRef<string[]>([]);\n\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current,\n  }));\n\n  useEffect(() => {\n    if (!divRef.current) return;\n    if (!chartRef.current) {\n      chartRef.current = init(divRef.current);\n    }\n\n    Object.entries(eventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.off(name);\n      chartRef.current?.on(name, handler);\n    });\n\n    Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.getZr().off(name);\n      chartRef.current?.getZr().on(name, handler);\n    });\n\n    chartRef.current.setOption(echartOptions, true);\n  }, [echartOptions, eventHandlers, zrEventHandlers]);\n\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current) return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter(\n        value => !currentSelection.includes(value),\n      ),\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection,\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection]);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.resize({ width, height });\n    }\n  }, [width, height]);\n\n  return <Styles ref={divRef} height={height} width={width} />;\n}\n\nexport default forwardRef(Echart);\n"],"names":["RadioButtonControl","ExtraControlsWrapper","style","ExtraControls","formData","setControlValue","extraControlsOptions","extraControlsHandler","extraValue","stack","area","setExtraValue","useState","undefined","useEffect","useMemo","useCallback","value","useExtraControl","showExtraControls","options","onChange","EchartsTimeseries","height","width","echartOptions","groupby","labelMap","selectedValues","setDataMask","legendData","onLegendStateChanged","emitFilter","echartRef","useRef","clickTimer","handleChange","values","groupbyValues","map","extraFormData","filters","length","col","idx","val","v","op","filterState","label","eventHandlers","click","props","current","clearTimeout","setTimeout","seriesName","name","Object","includes","filter","legendselectchanged","payload","selected","legendselectall","legendinverseselect","zrEventHandlers","dblclick","params","pointInPixel","offsetX","offsetY","echartInstance","getEchartInstance","containPixel","target","type","globalModel","getModel","model","el","modelInfo","__ecComponentInfo","getComponent","mainType","index","parent","getModelInfo","legendState","reduce","previous","datum","Echart","ref","Styles","divRef","chartRef","currentSelection","keys","previousSelection","useImperativeHandle","entries","forEach","handler","off","on","getZr","setOption","dispatchAction","dataIndex","resize","forwardRef"],"sourceRoot":""}